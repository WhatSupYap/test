@using System.Data;
@using Interlock.Controllers;
@using Interlock.Helpers;
@using WebUtil;
@{
    if ((bool)ViewBag.Ajax == true)
    {
        Layout = null;
    }
    else
    {
        Layout = "~/Views/Shared/_Layout.cshtml";
    }

    Util util = ViewBag.util;
    DataSet ds = ViewBag.ds;
    DataTable dtMailTaget_BU = ViewBag.dtMailTaget_BU;
    DataTable dtGubun = ViewBag.dtGubun;
    DataTable dt_CC = ViewBag.dt_CC;

    string AuthLevel = ViewBag.AuthLevel;
    string PCS = ViewBag.PCS;
    string PartnerInfo = ViewBag.PartnerInfo;
    string BuAll = ViewBag.BuAll;

    //Guid guid = ViewBag.guid;
    // string heightMinus = "330";
}
<div id="PartnerExpenseReport" class="wrapper wrapper-content animated fadeInRight">
    <div class="row">
        <div class="col-lg-12">
            <div class="ibox float-e-margins">
                <div class="ibox-title">
                    <h5>Expense Budget Report</h5>
                    <div class="ibox-tools">
                        @*<button id="BtnHelp" class="btn btn-xs btn-info" type="button" onclick="ListBack();"><i class="fa fa-exclamation-circle"></i>Help</button>*@
                        <button id="BtnExcel_grid1" class="btn btn-xs btn-primary hidden" type="button" onclick=""><i class="fa fa-save"></i>&nbsp;엑셀</button>
                        @if (AuthLevel == "ADMIN")
                        {
                            <button id="BtnCode1" class="btn btn-xs btn-primary" type="button" value="1"><i class="fa fa-envelope"></i>&nbsp;WBS 제외</button>
                            <button id="BtnCode2" class="btn btn-xs btn-primary" type="button" value="2"><i class="fa fa-envelope"></i>&nbsp;WBS-CC 매핑</button>
                            <button id="BtnMail_grid2" class="btn btn-xs btn-primary hidden" type="button"><i class="fa fa-envelope"></i>&nbsp;메일 보내기</button>
                            <button id="BtnMail_grid3" class="btn btn-xs btn-primary hidden" type="button"><i class="fa fa-envelope"></i>&nbsp;메일 보내기</button>
                            @Html.MngBuMailingBtn("EBR_BU", $"<i class='fa fa-envelope'></i>  메일 수신자 관리", new { @class = "btn btn-xs btn-primary hidden", @title = "Expense Budget" })
                            @*<button id="BtnMail_Config" class="btn btn-xs btn-primary hidden" type="button"><i class="fa fa-envelope"></i>&nbsp;메일 수신자</button>*@

                        }
                        <button id="BtnSearch" class="btn btn-xs btn-success" type="button"><i class="fa fa-search"></i>&nbsp;검색</button>
                        <button id="BtnBack" class="btn btn-xs btn-warning hidden" type="button"><i class="fa fa-undo"></i>&nbsp;뒤로</button>
                    </div>
                </div>

                <!-- 검색 영역 -->
                <div class="ibox-content">
                    <div class="row" style="margin:0;">
                        <div id="SearchArea" class="col-sm-12">
                            <input type="hidden" name="csrf_token" value="@ViewBag.csrf_token">
                            <input type="hidden" id="toList" name="toList">
                            <input type="hidden" id="hdnOverLimit" name="hdnOverLimit" value="70" />
                            <div class="form-group row m-b-xs">
                                <div class="col-sm-12">
                                    <div class="form-group row m-b-xs">
                                        <label class="col-sm-2 col-form-label" style="padding-top:3px;">Key Month</label>
                                        <div class="col-sm-10">
                                            <div class="input-group date col-sm-2 fw-120" dateMode="Month2">
                                                @Html.TextBox("txtKeyMonth", "", new { @class = "form-control", @maxlength = "7", @title = "Key Month" })<span class="input-group-addon"><i class="fa fa-calendar"></i></span>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="form-group row m-b-xs">
                                        <label class="col-sm-2 col-form-label" style="padding-top:3px;">구분</label>
                                        <div class="col-sm-10">
                                            <select id="selGubun" name="selGubun" class="form-control input-sm fw-150" title="구분">
                                                @if (dtGubun != null)
                                                {
                                                    for (int i = 0; i < dtGubun.Rows.Count; i++)
                                                    {
                                                        <option value="@dtGubun.Rows[i]["value"].ToString()">@dtGubun.Rows[i]["name"].ToString()</option>
                                                    }
                                                }
                                            </select>
                                        </div>
                                    </div>
                                    <div class="form-group row m-b-xs">
                                        <label class="col-sm-2 col-form-label" style="padding-top:3px;">Company Code</label>
                                        <div class="col-sm-10">
                                            <select id="selCompanyCode" name="selCompanyCode" class="form-control input-sm fw-150" title="Company Code">
                                                <option value=""></option>
                                                @if (dt_CC != null)
                                                {
                                                    for (int i = 0; i < dt_CC.Rows.Count; i++)
                                                    {
                                                        <option value="@dt_CC.Rows[i]["COMPANY_CODE"].ToString()">@dt_CC.Rows[i]["COMPANY_NAME"].ToString()</option>
                                                    }
                                                }
                                            </select>
                                        </div>
                                    </div>
                                    <div class="form-group row m-b-xs" id="costCenter_Area">
                                        <label class="col-sm-2 col-form-label" style="padding-top:3px;">Cost Center</label>
                                        <div class="col-sm-10">
                                            <input type="text" id="txtCostCenter" name="txtCostCenter" class="form-control input-sm fw-150" title="CostCenter" value="" maxlength="10">
                                        </div>
                                    </div>
                                    <div class="form-group row m-b-xs">
                                        <label class="col-sm-2 col-form-label" style="padding-top:3px;">Business Unit</label>
                                        <div class="col-sm-10">
                                            <select id="selBusinessUnit" name="selBusinessUnit" title="BU" class="form-control input-sm fw-150">
                                                <option value="@BuAll"></option>
                                            </select>
                                        </div>
                                    </div>
                                    <div class="form-group row m-b-xs" id="partnerNo_Area">
                                        <label class="col-sm-2 col-form-label" style="padding-top:3px;">Participating Partner</label>
                                        <div class="col-sm-10">
                                            <div class="input-group col-sm-3 fw-600" style="padding-top: 3px;">
                                                @if (AuthLevel == "PARTNER")
                                                {
                                                    @*@Html.UserCodeSWIFT("txtPartner", "", "", new { @class = "form-control fw-140", @reqcheck = "reqcheck", @messages = "사용자를 입력해주세요.", @maxlength = "8", @value = PCS });*@
                                                    <input type="text" id="txtPartner" name="txtPartner" class="form-control fw-140" value="@PCS" />
                                                    <div class="fw-450" style="display: table-cell; padding-left: 10px; text-align: left; vertical-align: middle;" id="txtPartnerInfo">@PartnerInfo</div>
                                                }
                                                else
                                                {
                                                    @Html.UserCodeSWIFT("txtPartner", "", "", new { @class = "form-control fw-140", @reqcheck = "reqcheck", @messages = "사용자를 입력해주세요.", @maxlength = "8" });
                                                    <span class="input-group-btn">
                                                        <button id="btnPartner" type="button" class="btn btn-success" onclick="$('#txtPartner').dblclick();"><i class="fa fa-search"></i></button>
                                                    </span>
                                                    <div class="fw-450" style="display: table-cell; padding-left: 10px; text-align: left; vertical-align: middle;" id="txtPartnerInfo"></div>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div style="display:none;">
                                <input type="hidden" name="guid" />
                            </div>
                        </div>
                        <!-- 리스트 영역 -->
                        <div id="ListArea" class="table-responsive p-ml">
                            <div id="SearchText">
                                <label class="col-form-label" style="" id="lbl_SearchText"></label>
                            </div>
                            <div id="tabs">
                                <ul>
                                    <li class="litab" idx="0"><a href="#tabs-0">FIRM</a></li>
                                    <li class="litab" idx="1"><a href="#tabs-1">BU</a></li>
                                    <li class="litab" idx="2"><a href="#tabs-2">Partner</a></li>
                                    <li class="litab" idx="3"><a href="#tabs-3">Detail</a></li>
                                    <li class="litab" idx="4"><a href="#tabs-4">사용율70%초과</a></li>
                                </ul>
                                <div id="tabs-0" class="divtab">
                                    <div id="ra0" class="ReportArea"></div>
                                </div>
                                <div id="tabs-1" class="divtab">
                                    <div id="ra1" class="ReportArea"></div>
                                </div>
                                <div id="tabs-2" class="divtab">
                                    <div id="ra2" class="ReportArea"></div>
                                </div>
                                <div id="tabs-3" class="divtab">
                                    <div id="ra3" class="ReportArea"></div>
                                </div>
                                <div id="tabs-4" class="divtab">
                                    <div id="ra4" class="ReportArea"></div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<input type="hidden" id="hdnBuList" value="@ViewBag.buList" />
<input type="hidden" id="hdnMoreBuList" value="@ViewBag.MoreBuList" />
<div class="tooltip-mailsend hidden" style="border: 1px solid gray; padding: 10px; z-index: 9999; position: absolute; background-color: #ffffff; width: 135px">
    <ul class="ulTooltip-mailsend" style="padding:0px;">
        @if (dtMailTaget_BU != null)
        {
            for (int i = 0; i < dtMailTaget_BU.Rows.Count; i++)
            {
                <li style="list-style-type: none;"><input type="checkbox" class="chkMailTaget" style="margin-right:5px;" value="@dtMailTaget_BU.Rows[i]["BU_CC"].ToString()" /><label>@dtMailTaget_BU.Rows[i]["BU_NM"].ToString()</label></li>
            }
        }
    </ul>

    <button id="BtnMailCancel" class="btn btn-xs btn-warning" style="float:right" type="button">취소</button>
    <button id="BtnMailOk" class="btn btn-xs btn-primary" style="float: right; margin-right:5px;" type="button">확인</button>
</div>
<script>
    // datepicker용
    DatepickerMonthSet = {
        format: "yyyy-mm",
        dateFormat: "yyyy-mm",
        startView: "months",
        minView: "months",
        minViewMode: 1,
        language: "kr",
        todayBtn: "linked",
        keyboardNavigation: false,
        forceParse: false,
        calendarWeeks: true,
        autoclose: true,
        todayHighlight: true,
        toggleActive: true
    }

    // DatePicker (기본)
    var GetDateKeyOnlyNum = function (val) {
        var num = val;
        var tmp = "";

        for (var i = 0; i < num.length; i++) {
            if (num.charAt(i) >= 0 && num.charAt(i) <= 9)
                tmp = tmp + num.charAt(i);
            else
                continue;
        }
        return tmp;
    }
    var GetDateKeyUp = function (e, Obj) {
        var EventObj;
        if (window.event) {
            EventObj = window.event;
        } else {
            EventObj = e;
        }

        if (EventObj.keyCode == 46) {
            Obj.val("");
            return;
        }

        var str = GetDateKeyOnlyNum(Obj.val());
        var leng = str.length;

        switch (leng) {
            case 1:
            case 2:
            case 3:
            case 4: Obj.val(str); break;
            case 5:
            case 6: Obj.val(str.substring(0, 4) + "-" + str.substring(4)); break;
            case 7:
            case 8: Obj.val(str.substring(0, 4) + "-" + str.substring(4, 6) + "-" + str.substring(6)); break;
        }
    }
    var GetDateKeyRetrun = function (Obj) {
        var vDate = new Date();
        var dYear = vDate.getFullYear().toString();
        var dMonth = "";
        var dDate = "";

        dMonth = "0" + (vDate.getMonth() + 1).toString();
        if (dMonth.length == 3)
            dMonth = dMonth.substring(1, 3);

        dDate = "0" + vDate.getDate().toString();
        if (dDate.length == 3)
            dDate = dDate.substring(1, 3);

        var inputText = Obj.val();
        if (inputText.length == 1) {
            Obj.val(dYear + "-" + dMonth + "-0" + inputText);
        } else if (inputText.length == 2) {
            Obj.val(dYear + "-" + dMonth + "-" + inputText);
        } else if (inputText.length == 3) {
            var firstText = inputText.substring(0, 1);
            var lastText = inputText.substring(1, 3);
            Obj.val(dYear + "-0" + firstText + "-" + lastText);
        } else if (inputText.length == 4) {
            var firstText = inputText.substring(0, 2);
            if (firstText == "20" || firstText == "19") {
                Obj.val(inputText);
            } else {
                var lastText = inputText.substring(2, 4);
                Obj.val(dYear + "-" + firstText + "-" + lastText);
            }
        } else if (inputText.length == 7) {
            var arr = inputText.split("-");
            if (arr.length == 2) {
                if (arr[0].length == 4 && arr[1].length == 2) {
                    Obj.val(inputText);
                } else {
                    Obj.val(dYear + "-" + dMonth + "-" + dDate);
                }
            }
        }
    }
    var GetDateCheckDate = function (Obj) {
        var str = Obj.val().replace(".", "").replace(".", "").replace("-", "").replace("-", "").trim();

        if (str.length == 8) {
            var vDate = new Date();
            var nYear = parseInt(str.substring(0, 4), 10);
            var nMonth = parseInt(str.substring(4, 6), 10) - 1;
            var nDate = parseInt(str.substring(6), 10);

            vDate.setFullYear(nYear);
            vDate.setMonth(nMonth);
            vDate.setDate(nDate);

            if (vDate.getFullYear() != nYear ||
                vDate.getMonth() != nMonth ||
                vDate.getDate() != nDate) {
                return false;
            }
            return true;
        } else if (str.length == 4) {
            var inputText = Obj.val();
            var firstText = inputText.substring(0, 2);
            if (firstText == "20" || firstText == "19") {
                return true;
            } else {
                return false;
            }
        } else if (str.length == 6) {
            var inputText = Obj.val();
            var arr = inputText.split(".");
            if (arr.length == 2) {
                if (arr[0].length == 4 && arr[1].length == 2) {
                    return true;
                } else {
                    return false;
                }
            }
        } else {
            return false;
        }
    }

    const dateCtrl = $('.input-group.date[dateMode=Month2]');
    dateCtrl.datepicker(DatepickerMonthSet).on("show", Custom.DatepickerShow).on("hide", Custom.DatepickerHide);
    dateCtrl.find("input").each(function () { var thisObj = $(this); $(this).data("SetValue", function (value) { thisObj.val(value); thisObj.parent().datepicker(DatepickerMonthSet).datepicker("update").on("show", Custom.DatepickerShow).on("hide", Custom.DatepickerHide); }); $(this).bind("keypress", function (e) { $('.datepicker').hide(); if (Common.Enter(e) == true) { thisObj.blur(); } }); $(this).bind("keyup", function (e) { GetDateKeyUp(e, thisObj); }); $(this).bind("blur", function (e) { GetDateKeyRetrun(thisObj); if (thisObj.val() != "" && GetDateCheckDate(thisObj) == false) { thisObj.val(""); } }); });
</script>
<script type="text/javascript">
    const txtKeyMonth = $("#txtKeyMonth");
    const selGubun = $("#selGubun");
    const txtCostCenter = $("#txtCostCenter");
    const selCompanyCode = $("#selCompanyCode");
    const selBusinessUnit = $("#selBusinessUnit");
    const txtPartner = $("#txtPartner");
    const txtPartnerInfo = $("#txtPartnerInfo");
    const btnPartner = $("#btnPartner");
    const btnSearch = $("#BtnSearch");
    const btnBack = $("#BtnBack");
    const btnExcelFirm = $("#BtnExcel_grid1");
	const btnMailBu = $("#BtnMail_grid2");
	const btnMailOver = $("#BtnMail_grid3");
    const btnMailConfig = $("#EBR_BU");
    const tooltip_area = $(".tooltip-mailsend");
    const btnMailOk = $("#BtnMailOk");
    let currentFiscalYear = 0;
    let mustInput = [];
    let activeTabs = [];
    const dic = {};
    dic[0] = "Firm";
    dic[1] = "Bu";
    dic[2] = "Partner";
    dic[3] = "Detail";
    const heightMinus = "330";

    const makeGridObj = (idx) => {
        const gridObj = {
            bubble: false,
            columnTemplate: { align: 'center', hvalign: 'center', width: 100 },
            numberCell: { show: false },
            //editor: { type: 'textbox', style: 'border-radius:0px;border:0px;' },
            //editModel: { clicksToEdit: 2 },
            selectionModel: { type: 'cell', mode: 'block' },
            height: $(window).height() - heightMinus,
            title: "",
            sortable: false,
            resizable: true,
			menuIcon: false,
            scrollModel: { autoFit: false },
            hoverMode: 'row',
            rowHtHead: 20,
            roundCorners: false,
            rowBorders: true,
            showTitle: false,
            showHeader: true,
            showTop: true, // Top 공개여부
            showToolbar: true, // 툴바 공개여부, 툴바는 Top에 속해있음
            showBottom: false,
            stripeRows: false, // 짝수줄 강조
            wrap: false,
            headerMenu: false,
            rowSpanHead: true,
            collapsible: {
                on: false
            },
            contextMenu: {
            },
            selectChange: function (event, ui) {
            },
            rowClick: function (event, ui) {
            },
            cellClick: function (event, ui) {
            },
            rowDblClick: function (event, ui) {
            },
            rowSelect: function (event, ui) {
            },
            open: function () {
            },
            headerCellClick: function (event, ui) {
            },
            change: function (event, ui) {
            },
            beforeTableView: function (event, ui) {
            },
            rowInit: function (ui) {
            }
        };

        return gridObj;
    }

    const setGroupModel = (gridObj, idx) => {
		const toolbar = { items: [{ type: 'button', label: "Grouping", listener: function () { var on = this.option('groupModel.on'); this.Group().option({ on: !on }); } }] };
		const gm = {
			on: true,
			collapsed: false, // 그루핑 된 컬럼이 자동으로 닫혀 있는 여부
			merge: true,
			//showSummary: true,
			//summaryEdit: false,
			//grandSummary: false,
			title: [],
		};

		const setDefaultTitle = (groupModel) => {
			for (const t in groupModel.dataIndx) groupModel.title.push("{0}");
		}

		if (idx === 0) {
			//gridObj.scrollModel = { autoFit: true };
			gm.collapsed = [true];
			gm.dataIndx = ['WT_NM']
			setDefaultTitle(gm);
			gridObj["groupModel"] = gm;
			gridObj["toolbar"] = toolbar;
		}
		if (idx === 1) {
			gm.collapsed = [false];
			gm.dataIndx = ['BU_NM', 'CC_NM', 'CC_LV2', 'CC_LV3']
			setDefaultTitle(gm);
			gridObj["groupModel"] = gm;
			gridObj["toolbar"] = toolbar;
		}
		else if (idx === 2) {
			//Group Model
			gm.dataIndx = ['GUBUN','PTN_NO', 'PTN_NM']
			setDefaultTitle(gm);
			gridObj["groupModel"] = gm;
			gridObj["toolbar"] = toolbar;
		}
    }

    const makeColModel = (idx, data) => {
        const colModel = [];
        // Default Settings 기본 설정
		const styleSet1 = { "background-color": "#FFE0E0", "color": "#FF0000" };
		const styleSet1_1 = "background-color:#FFC8C8;color:#FF0000;";
		const styleSet2 = { "background-color": "#26890D", "color": "#FFFFFF", "font-weight": "bolder", "text-align": "center" };
		const styleSet3 = { "background-color": "#86BC25" };
		const styleSet_rt2 = { "background-color": "#FAFAD2" };
		const styleSet_rt3 = { "background-color": "#DAF2D0" };

        const ds = { dataType: "string", sortable: false, editor: false, editable: false };
        const dst = { dataType: "string", sortable: false, editor: false, editable: false, summary: { type: "top1" } };
        const dsi = { dataType: "integer", sortable: false, halign: "center", align: "right", editor: false, editable: false, format: "#,##0" };
		const rdn_row = { render: (ui) => { return cf(ui) } };
		const ds_amt_total = { ...dsi, width: 150, styleHead: styleSet2, render: (ui) => { return cf(ui, "V_TOTAL") }};
		const ds_amt_month = { ...dsi, width: 150, styleHead: styleSet3, ...rdn_row };
		const dsis = { dataType: "integer", sortable: false, halign:"center", align: "right", editor: false, editable: false, format: "#,##0", summary: { type: "sum2" } };
        const dsit = { dataType: "integer", sortable: false, halign:"center", align: "right", editor: false, editable: false, format: "#,##0", summary: { type: "top1" } };

        const dsis_amt_bu = (id) => {
			return { ...dsis, width:150 , render: (ui) => { return cf(ui, id) } }
        }

		const dsit_amt_bu = (id) => {
			return { ...dsit, width: 150, render: (ui) => { return cf(ui, id) } }
		}

        const cf = (ui, col) => {
            const rtn = {};

			if (typeof col !== "undefined" && 0 < col.length && ui.rowData[col] < 0) {
                rtn.style = styleSet1;
			}

			return rtn;
		}

		if (!Common.IsEmpty(data)) {
			for (const row of data) {
				if (row.ROW_TYPE === 2)
					row.pq_rowstyle = styleSet_rt2;
				else if (row.ROW_TYPE === 3)
					row.pq_rowstyle = styleSet_rt3;
			}
		}



        // Conditional Formatting
		/*------------------------------------------------------------
		// FIRM
		------------------------------------------------------------*/
        if (idx === 0) {
            colModel.push
            (
                { title: "SORT", dataIndx: "SORT", hidden: true },
				{ title: "WBS TYPE", dataIndx: "WT_CD", hidden: true },
				{ title: "WBS TYPE", dataIndx: "WT_NM", width: 150, halign: "center", align: "left", styleHead: styleSet2 },
				{ title: "GL", dataIndx: "GL_CD", styleHead: styleSet2 },
				{ title: "GL Text", dataIndx: "GL_NM", width: 310, halign: "center", align: "left", styleHead: styleSet2 },
                {
                    title: "FIRM Total", align: "center", colModel: [
						{ title: "Budget", dataIndx: "B_TOTAL", ...dsis_amt_bu("V_TOTAL") },
						{ title: "Actual", dataIndx: "A_TOTAL", ...dsit_amt_bu("V_TOTAL") },
                        { title: "잔여예산", dataIndx: "V_TOTAL", ...dsis_amt_bu("V_TOTAL") },
						{ title: "사용률", dataIndx: "PERCENT", ...dsit_amt_bu("V_TOTAL") },
                    ]
                },
				{
					title: "A&A", halign: "center", ...dsit, colModel: [
						{ title: "Budget", dataIndx: "B_AA", ...dsis_amt_bu("V_AA")  },
						{ title: "Actual", dataIndx: "A_AA", ...dsit_amt_bu("V_AA") },
						{ title: "잔여예산", dataIndx: "V_AA", ...dsis_amt_bu("V_AA") }
					]
				},

            );
            if (currentFiscalYear < 2025) {
                colModel.push(
					{
						title: "CONSULTING", halign: "center", ...dsit, colModel: [
							{ title: "Budget", dataIndx: "B_CO", ...dsis_amt_bu("V_CO") },
							{ title: "Actual", dataIndx: "A_CO", ...dsit_amt_bu("V_CO") },
							{ title: "잔여예산", dataIndx: "V_CO", ...dsis_amt_bu("V_CO") }
						]
					},
					{
						title: "FA", halign: "center", ...dsit, colModel: [
							{ title: "Budget", dataIndx: "B_FA", ...dsis_amt_bu("V_FA") },
							{ title: "Actual", dataIndx: "A_FA", ...dsit_amt_bu("V_FA") },
							{ title: "잔여예산", dataIndx: "V_FA", ...dsis_amt_bu("V_FA") }
						]
					},
                    {
                        title: "RISK ADVISORY", halign: "center", ...dsit, colModel: [
                            { title: "Budget", dataIndx: "B_RA", ...dsis_amt_bu("V_RA") },
                            { title: "Actual", dataIndx: "A_RA", ...dsit_amt_bu("V_RA") },
                            { title: "잔여예산", dataIndx: "V_RA", ...dsis_amt_bu("V_RA") }
                        ]
                    },
                );
            }
            else {
				colModel.push(
					{
						title: "T&T", halign: "center", ...dsit, colModel: [
							{ title: "Budget", dataIndx: "B_CO", ...dsis_amt_bu("V_CO") },
							{ title: "Actual", dataIndx: "A_CO", ...dsit_amt_bu("V_CO") },
							{ title: "잔여예산", dataIndx: "V_CO", ...dsis_amt_bu("V_CO") }
						]
					},
					{
						title: "SR&T", halign: "center", ...dsit, colModel: [
							{ title: "Budget", dataIndx: "B_FA", ...dsis_amt_bu("V_FA") },
							{ title: "Actual", dataIndx: "A_FA", ...dsit_amt_bu("V_FA") },
							{ title: "잔여예산", dataIndx: "V_FA", ...dsis_amt_bu("V_FA") }
						]
					},
				);
            }
            colModel.push
            (
				{
					title: "TAX", halign: "center", ...dsit, colModel: [
						{ title: "Budget", dataIndx: "B_TA", ...dsis_amt_bu("V_TA") },
						{ title: "Actual", dataIndx: "A_TA", ...dsit_amt_bu("V_TA") },
						{ title: "잔여예산", dataIndx: "V_TA", ...dsis_amt_bu("V_TA") }
					]
				},
				{
					title: "C&S", halign: "center", ...dsit, colModel: [
						{ title: "Budget", dataIndx: "B_CS", ...dsis_amt_bu("V_CS") },
						{ title: "Actual", dataIndx: "A_CS", ...dsit_amt_bu("V_CS") },
						{ title: "잔여예산", dataIndx: "V_CS", ...dsis_amt_bu("V_CS") }
					]
				},
				{
					title: "Growth", halign: "center", ...dsit, colModel: [
						{ title: "Budget", dataIndx: "B_IB", ...dsis_amt_bu("V_IB") },
						{ title: "Actual", dataIndx: "A_IB", ...dsit_amt_bu("V_IB") },
						{ title: "잔여예산", dataIndx: "V_IB", ...dsis_amt_bu("V_IB") }
					]
				},
				{
					title: "Advisor Group", halign: "center", ...dsit, colModel: [
						{ title: "Budget", dataIndx: "B_ADV", ...dsis_amt_bu("V_ADV") },
						{ title: "Actual", dataIndx: "A_ADV", ...dsit_amt_bu("V_ADV") },
						{ title: "잔여예산", dataIndx: "V_ADV", ...dsis_amt_bu("V_ADV") }
					]
				},
            )
        }
		/*------------------------------------------------------------
	    // BU
	    ------------------------------------------------------------*/
        else if (idx === 1) {
            colModel.push(
                /*{ ...ds, title: "BU Code", dataIndx: "BU_CD" },*/
				{ title: "ROW_TYPE", dataIndx: "ROW_TYPE", hidden: true },
				{ title: "FY", dataIndx: "FY", hidden: true },
				{ title: "BU_CD", dataIndx: "BU_CD", hidden: true },
				{ title: "BU Name", dataIndx: "BU_NM", ...ds, width: 110, halign: "center", align: "left", render: (ui) => { return cf(ui) } },
                { title: "LV 2", dataIndx: "CC_LV2", ...ds, width: 200, render: (ui) => { return cf(ui) } },
				{ title: "LV 3", dataIndx: "CC_LV3", ...ds, width: 200, render: (ui) => { return cf(ui) } },
				{ title: "CC Code", dataIndx: "CC_CD", hidden: true },
				{ title: "CC Name", dataIndx: "CC_NM", ...ds, width: 180, halign: "center", align: "left", render: (ui) => { return cf(ui) } },
				{ title: "WT_CD", dataIndx: "WT_CD", hidden: true },
				{ title: "코드 구분 ", dataIndx: "WT_NM", ...ds, width: 150, halign: "center", align: "left", render: (ui) => { return cf(ui) } },
				{ title: "Budget", dataIndx: "B_TOTAL", ...ds_amt_total },
				{ title: "Actual", dataIndx: "A_TOTAL", ...ds_amt_total },
                { title: "잔여예산", dataIndx: "V_TOTAL", ...ds_amt_total },
				{ title: "사용률", dataIndx: "PERCENT", ...ds_amt_total },
				{ title: "Jun", dataIndx: "A_JUN", ...ds_amt_month },
				{ title: "Jul", dataIndx: "A_JUL", ...ds_amt_month },
				{ title: "Aug", dataIndx: "A_AUG", ...ds_amt_month },
				{ title: "Sep", dataIndx: "A_SEP", ...ds_amt_month },
				{ title: "Oct", dataIndx: "A_OCT", ...ds_amt_month },
				{ title: "Nov", dataIndx: "A_NOV", ...ds_amt_month },
				{ title: "Dec", dataIndx: "A_DEC", ...ds_amt_month },
				{ title: "Jan", dataIndx: "A_JAN", ...ds_amt_month },
				{ title: "Feb", dataIndx: "A_FEB", ...ds_amt_month },
				{ title: "Mar", dataIndx: "A_MAR", ...ds_amt_month },
				{ title: "Apr", dataIndx: "A_APR", ...ds_amt_month },
				{ title: "May", dataIndx: "A_MAY", ...ds_amt_month },
            );
        }
		/*------------------------------------------------------------
        // PARTNER
        ------------------------------------------------------------*/
        else if (idx === 2) {
			//, render: (ui) => { return cf2(ui, "V_TOTAL") }
            colModel.push(
				{ title: "구분", dataIndx: "GUBUN" },
				{ title: "ROW_TYPE", dataIndx: "ROW_TYPE", hidden: true },
                { title: "FY", dataIndx: "FY", hidden: true },
				{ title: "Partner Name", dataIndx: "PTN_NM", ...ds, width: 150, render: (ui) => { return cf(ui) } },
				{ title: "Partner", dataIndx: "PTN_NO", ...ds, width: 150, render: (ui) => { return cf(ui) } },
				{ title: "WT_CD", dataIndx: "WT_CD", hidden: true },
                { title: "WBS TYPE", dataIndx: "WT_NM", ...ds, width: 150, halign: "center", align: "left", render: (ui) => { return cf(ui) } },
				{ title: "Engagement(WBS L2)", dataIndx: "WBS_CD", hidden: true },
				{ title: "Engagement", dataIndx: "ENG_NM", ...ds, width: 190, halign: "center", align: "left", render: (ui) => { return cf(ui) } },
				{ title: "Budget", dataIndx: "B_TOTAL", ...ds_amt_total },
				{ title: "Actual", dataIndx: "A_TOTAL", ...ds_amt_total },
                { title: "잔여예산", dataIndx: "V_TOTAL", ...ds_amt_total },
				{ title: "사용률", dataIndx: "PERCENT", ...ds_amt_total },
				{ title: "Jun", dataIndx: "A_JUN", ...ds_amt_month },
				{ title: "Jul", dataIndx: "A_JUL", ...ds_amt_month },
				{ title: "Aug", dataIndx: "A_AUG", ...ds_amt_month },
				{ title: "Sep", dataIndx: "A_SEP", ...ds_amt_month },
				{ title: "Oct", dataIndx: "A_OCT", ...ds_amt_month },
				{ title: "Nov", dataIndx: "A_NOV", ...ds_amt_month },
				{ title: "Dec", dataIndx: "A_DEC", ...ds_amt_month },
				{ title: "Jan", dataIndx: "A_JAN", ...ds_amt_month },
				{ title: "Feb", dataIndx: "A_FEB", ...ds_amt_month },
				{ title: "Mar", dataIndx: "A_MAR", ...ds_amt_month },
				{ title: "Apr", dataIndx: "A_APR", ...ds_amt_month },
                { title: "May", dataIndx: "A_MAY", ...ds_amt_month },
            );
        }
        /*------------------------------------------------------------
        // DETAIL
        ------------------------------------------------------------*/
        else if (idx === 3) {
            colModel.push(
				/*{ ...ds, title: "", dataIndx: "CC_BU_CD" },*/
                { ...ds, title: "Business Unit", dataIndx: "BU_NM", width: 140 },
				{ ...ds, title: "Cost Center", dataIndx: "CC_CD", width: 140 },
				{ ...ds, title: "Cost Center Desc.", dataIndx: "CC_NM", width: 190 },
                { ...ds, title: "WBS TYPE", dataIndx: "WT_NM", width: 120 },
				{ ...ds, title: "Engagement", dataIndx: "WBS_CD", width: 140 },
                { ...ds, title: "Engagement Name", dataIndx: "ENG_NM", width: 180 },
				{ ...ds, title: "Partner No", dataIndx: "PTR_NO", width: 130 },
                { ...ds, title: "Partner Name", dataIndx: "PTR_NM", width: 130 },
				{ ...ds, title: "Manager No", dataIndx: "MGR_NO", width: 130 },
                { ...ds, title: "Manager Name", dataIndx: "MGR_NM", width: 130 },
				{ ...ds, title: "사용자 사번", dataIndx: "EMP_NO", width: 120 },
				{ ...ds, title: "사용자 명", dataIndx: "EMP_NM", width: 140 },
                { ...ds, title: "Type", dataIndx: "TYPE" },
				{ ...ds, title: "Posting Date", dataIndx: "POST_DATE", width: 120 },
				{ ...ds, title: "Use Date", dataIndx: "USE_DATE" },
				{ ...ds, title: "Use Time", dataIndx: "USE_TIME" },
				{ ...ds, title: "G/L", dataIndx: "GL_CD" },
				{ ...ds, title: "Description", dataIndx: "GL_NM", width: 220 },
				{ ...ds, title: "Exp. Type", dataIndx: "EXP_TYPE", width: 200 },
                { ...ds, title: "Exp. Attribute", dataIndx: "EXP_ATTR", width: 150 },
				{ ...ds, title: "Text", dataIndx: "DESC", align: "left", width: 400 },
                { ...dsi, title: "Expenses Current", dataIndx: "A_TOTAL", width: 150 },
				{ ...ds, title: "Vendor", dataIndx: "VENDOR_NM", width: 330, align: "left" },
				{ ...ds, title: "Merchant", dataIndx: "MCC_NAME", width: 200 },
				/*{ ...ds, title: "Doc. Vendor Name", dataIndx: "VENDOR_NAME", width: 330, align: "left" },*/
				{ ...ds, title: "AOP Request Number", dataIndx: "AOP_REQ_NO", width: 200 },
				{ ...dsi, title: "AOP Approved Amount", dataIndx: "AOP_REQ_AMT", width: 200 },
			)
		}
		else if (idx === 4) {
			colModel.push(
				{
					dataIndx: "state", maxWidth: 100, minWidth: 100, align: "center", resizable: false,
					type: 'checkBoxSelection', cls: 'ui-state-default', sortable: false, editor: false,
					title: "<label><input type='checkbox' /></label>",
					dataType: 'bool',
					cb: {
						all: false, //checkbox selection in the header affect current page only.
						header: true //show checkbox in header.
					},
					render: function (ui) {
						var cb = ui.column.cb,
							cellData = ui.cellData,
							checked = cb.check === cellData ? 'checked' : '',
							disabled = this.isEditableCell(ui) ? "" : "disabled"

						if (ui.rowData.ROW_NO == "U") {
							checked = "";
							disabled = "disabled";
						}
						if (ui.rowData.ROW_NO != "U") {
							if (checked == "checked") {
								ui.rowData.ROW_NO = "D";
							}
							else {
								ui.rowData.ROW_NO = "";
							}
						}

						return {
							text: `<label><input type='checkbox' ${checked} data-ptnno-bucd='${ui.rowData.PTN_NO}|${ui.rowData.BU_CD}' /></label>`, // 수정 20241026
							style: (disabled ? "background:lightgray" : "")
						};
					}
				},
				{ title: "ROW_TYPE", dataIndx: "ROW_TYPE", hidden: true },
				{ title: "FY", dataIndx: "FY", hidden: true },
				{ title: "Partner Name", dataIndx: "PTN_NM", ...ds, width: 150 },
				{ title: "Partner", dataIndx: "PTN_NO", ...ds, width: 150 },
				{ title: "BU", dataIndx: "BU_NM", ...ds, width: 100 }, // 수정 20241026
				{ title: "Partner", dataIndx: "BU_CD", hidden: true }, // 수정 20241026
				{ title: "WT_CD", dataIndx: "WT_CD", hidden: true },
				//{ title: "WBS TYPE", dataIndx: "WT_NM", ...ds, width: 150, halign: "center", align: "left", render: (ui) => { return cf(ui) } },
				// { title: "Engagement(WBS L2)", dataIndx: "WBS_CD", hidden: true },
				//{ title: "Engagement", dataIndx: "ENG_NM", ...ds, width: 190, halign: "center", align: "left", render: (ui) => { return cf(ui) } },
				{ title: "Budget", dataIndx: "B_TOTAL", ...ds_amt_total },
				{ title: "Actual", dataIndx: "A_TOTAL", ...ds_amt_total },
				{ title: "잔여예산", dataIndx: "V_TOTAL", ...ds_amt_total },
				{ title: "사용률", dataIndx: "PERCENT", ...ds_amt_total },
				{ title: "Jun", dataIndx: "A_JUN", ...ds_amt_month },
				{ title: "Jul", dataIndx: "A_JUL", ...ds_amt_month },
				{ title: "Aug", dataIndx: "A_AUG", ...ds_amt_month },
				{ title: "Sep", dataIndx: "A_SEP", ...ds_amt_month },
				{ title: "Oct", dataIndx: "A_OCT", ...ds_amt_month },
				{ title: "Nov", dataIndx: "A_NOV", ...ds_amt_month },
				{ title: "Dec", dataIndx: "A_DEC", ...ds_amt_month },
				{ title: "Jan", dataIndx: "A_JAN", ...ds_amt_month },
				{ title: "Feb", dataIndx: "A_FEB", ...ds_amt_month },
				{ title: "Mar", dataIndx: "A_MAR", ...ds_amt_month },
				{ title: "Apr", dataIndx: "A_APR", ...ds_amt_month },
				{ title: "May", dataIndx: "A_MAY", ...ds_amt_month },
			);
		}
        return colModel;
	}


    // 데이터 조회
    const getGridData = (idx) =>
    {
        const reqInfo = new Common.RequestInfo();
        reqInfo.formData = new FormData();
        reqInfo.AddParameter($("#SearchArea"));

        let datas = [];
        Common.Ajax(`/Sap_PartnerExpenseReport/EBReport${dic[idx]}Select`, reqInfo, function (rtn) {
            const dataDs = Common.DataSet.StringToDataSet(rtn);
            datas = dataDs.Tables[0].Rows;
        }, {
            okErr: function (result) {
                Common.Loading.Hide();
                Common.CheckErrorMsg(result);
            }
        });

        return datas;
    }

    // 조회 전체 로직
    const doSearch = () => {
        /*
        Key Month 는 현재일자의 년도월 기본값으로 표시 예)현재일자 2024.06.01이면 22406
        권한에 따라 BU 값과, Parnter name, 구분이 설정됨
        - 관리자(재경부, OCFO):  BU, Parnter, 구분 제한 없음, 모두 선택 가능
        - BU Admin: BU 에 소속 BU 값으로 입력되고 비활성, 구분에 BU, Parnter 선택 가능(기본값 BU)
        - 그외: Partner Name 에 본인 정보 입력되고 비활성, 구분에 Parnter 기본값 비활성
        * 구분 조건에 따라 검색조건 입력 여부가 결정
        - 구분에 FIRM 을 선택하면 Company Code, CostCenter, Business Unit, Parnter Name 이 모두 Clear 되고, 비활성
        - 구분에 BU를 선택하면  Business Unit 선택 필수, Parnter Name 이 Clear 되고 비활성

        */

        Common.Loading.Show();

        setTimeout(() => {
            btnSearch.addClass("hidden");
            $("#SearchArea").addClass("hidden");
            /*$("#SearchText").addClass("hidden");*/
            //$("#ReportArea").removeClass("hidden");
            $("#BtnBack").removeClass("hidden");
            $("#ListArea").removeClass("hidden");
            btnExcelFirm.removeClass("hidden");

            const getTextByCtrl = (ctrl) => {
                let txt = "";
                txt += ctrl.attr("title") + ": ";
                if (ctrl.prop("tagName") === "SELECT") {
                    txt += ctrl.find("option:checked").text();
                }
                else {
                    txt += ctrl.val();
                }
                txt += "<br>";
                return txt;
            }
            const gubunValue = $("#selGubun").val();
            let searchText = "";
            searchText += getTextByCtrl(txtKeyMonth);
            const fy = Common.GetFiscalYear($("#txtKeyMonth").val());
			currentFiscalYear = fy.fiscalYear;
			searchText += `YTD: ${Common.GetDateString(fy.startDate, "yyyy-MM")} ~ ${Common.GetDateString(fy.endDate, "yyyy-MM")}<br>`
            searchText += getTextByCtrl(selGubun);
            activeTabs = [];
            // 테스트용
            //activeTabs.push(2);

			// 탭 노출 설정
            switch (gubunValue) {
                case "F": activeTabs.push(0, 1, 2, 3, 4); break;
                case "B":
                    activeTabs.push(1, 2, 3);
                    searchText += getTextByCtrl(selBusinessUnit);
                    searchText += getTextByCtrl(txtCostCenter);
                    break;
                case "P": activeTabs.push(2, 3); break;
                default: break;
            }

            $("#lbl_SearchText").html(searchText);
            // 탭 노출 여부
            for (let li of $(".litab")) { li = $(li); const idx = Number(li.attr("idx")); if (activeTabs.includes(idx)) li.removeClass("hidden"); else li.addClass("hidden"); }

            let isFirst = true;
            for (const tabindex of activeTabs)
            {
                try {

                    if (isFirst) {
                        isFirst = false;
                        $("#tabs").tabs('option', 'active', tabindex);
                        initTab(tabindex);
                    }
                    const tab = $(`#tabs-${tabindex}`);
                    if (tab.attr("Create") === undefined)
                    {
                        tab.attr("Create", "Y");
                        const gridObj = makeGridObj(tabindex);

                        let data = getGridData(tabindex);

                        if (0 < data.length)
                        {
                            gridObj.dataModel = { data: data };
                            // 데이터 없는데 그룹 만들면 오류남
							setGroupModel(gridObj, tabindex);

							// BU 메일 전송용
							if (dic[tabindex].toUpperCase() === "BU") {
								// Set을 이용하여 중복 제거
								const uniqueGroups = new Set(data.map(item => item.BU_CD.trim()));
								//const uniqueGroups = new Set(data.map(item => `${item.BU_CD}|${item.BU_NM}`));
								// Set을 다시 배열로 변환
								const uniqueGroupsArray = [...uniqueGroups];

								for (const chk of $(".chkMailTaget")) {
									if (!uniqueGroupsArray.includes(chk.value))
										$(chk).attr("disabled", "disabled");
								}
							}
                        }
						const colModel_ = makeColModel(tabindex, data);
                        gridObj.colModel = colModel_;// { data: data };
                        const id = "#" + tab.find(".ReportArea").attr("id");

						// var grid = pq.grid("#grid_parts", obj);
						const grid = pq.grid(`${id}`, gridObj);

       //                 if (tabindex === 0) {
							//grid.on('complete change filter', function () {
							//	this.option('summaryData', calculateSummary(this));
							//	this.refreshSummary();
							//});
       //                 }

						grid.refresh();


                    } // if (tab.attr("Create") === undefined)
                } catch (e) {
                    console.log(`e: ${e}`);
                }

            }

            Common.Loading.Hide();
        }, 500);


    }
	$(btnExcelFirm).bind("click", function () {
        Common.Loading.Show();
        var date = Common.GetTodayTimeString();

        // activeTabs;

        setTimeout(function () {
            const wList = [];
            // Workbook Default Setting
            const wds = { workbook: true, render: true, noheader: false };
            let w = null;
            for (const activeTab of activeTabs) {
                //wList.push();
                // $(`#ra2`).pqGrid("instance") === pq.grid("#ra2")
                const gird = $(`#ra${activeTab}`).pqGrid("instance");

                if (w == null) {
                    w = gird.exportExcel({ workbook: true, sheetName: dic[activeTab], render: true, noheader: false });
                }
                else {
                    const wTemp = gird.exportExcel({ workbook: true, sheetName: dic[activeTab], render: true, noheader: false });
                    w.sheets.push(wTemp.sheets[0]);
                }
            }

            var blob = pq.excel.exportWb({ workbook: w, type: 'blob' });
            saveAs(blob, "Expense_Budget_Report_" + date + ".xlsx");

            Common.Loading.Hide();
        }, 500);
    });


    const doBack = () => {
        Common.Loading.Show();
        location.reload();


        //btnSearch.removeClass("hidden");
        //$("#SearchArea").removeClass("hidden");
        //$("#ReportArea").addClass("hidden");
        //$("#BtnBack").addClass("hidden");
        //$("#ListArea").addClass("hidden");
        //btnExcelFirm.addClass("hidden");

        /*const tabs = $('.divtab');*/
        /*for (const tab of tabs) {*/
        /*    $(tab).attr("Create", null);*/
        /*}*/
    }

    const cancelKeydown = function (e)
    {

	}
	const getBelowFy24_YN = () => {
		const fy = Common.GetFiscalYear($("#txtKeyMonth").val());
		let targetFlag = "Y";
		if (fy.fiscalYear < 2025) targetFlag = "Y"; else targetFlag = "N";
		return targetFlag;
	}
    const bindBU = () =>
    {
        // 검색용 BU 콤보 박스: 데이터 비우기
        $("#selBusinessUnit option:not(:first)").remove();
        // 메일 전송용 BU 리스트: 데이터 비우기
		//$(".ulTooltip-mailsend li").remove();

        const buList = $("#hdnBuList").val();
        const morebuList = $("#hdnMoreBuList").val();

        const dataTable = Common.DataSet.StringToDataTable(buList);
        const dataTableNew = Common.DataSet.StringToDataTable(morebuList);

		let targetFlag = getBelowFy24_YN();

        if (morebuList == '') {
            for (const row of dataTable.Rows) {

                if (row.FY24_BELOW !== targetFlag) continue;

                // 검색용 BU 콤보 박스
                var newOption = $("<option></option>")
                    .val(row.CostCenterFunction)
                    .text(row.CostCenterFunctionName);
                // select 요소에 추가
                $("#selBusinessUnit").append(newOption);

                // 메일 전송용 BU 리스트
                var newLi = $("<li></li>")
                    .append($("<input></input>")
                        .attr({
                            type: "checkbox",
                            class: "chkMailTaget",
                            style: "margin-right:5px;",
                            value: row.CostCenterFunction
                        }))
                    .append($("<label></label>").text(row.CostCenterFunctionName)); // 여기에 원하는 텍스트를 할당


                // #eee

                //$(".ulTooltip-mailsend").append(newLi);

            }
        }
        else {
            for (const row of dataTableNew.Rows) {
                // 검색용 BU 콤보 박스
                var Option = $("<option></option>")
                    .val(row.CostCenterFunction)
                    .text(row.CostCenterFunctionName);
                // select 요소에 추가
                $("#selBusinessUnit").append(Option);
            }
        }
		
	}
    const initPage = () => {
		Common.Loading.Show();
        // 날짜 초기화
        const now = new Date();
		now.setMonth(now.getMonth() - 1);

        const month = '0' + (now.getMonth() + 1); // 0부터 시작하기 때문에 1을 더합니다.
        $('#txtKeyMonth').val(`${now.getFullYear()}-${month.substring(month.length - 2, 2)}`);

        $("#tabs").tabs({
            activate: function (event, ui) {
                var selectedTab = $("#tabs").tabs('option', 'active'); // 선택된 tab의 index value
                initTab(selectedTab);
                if ($(`#ra${selectedTab}`).pqGrid('instance') !== undefined) {
                    $(`#ra${selectedTab}`).pqGrid('instance').iContext.model.on = true;
                    $(`#ra${selectedTab}`).pqGrid("refreshView");
                }
            }
        });

        //doSearch();
        initSearchArea(selGubun.val());

        if ("@AuthLevel" === "PARTNER") {
		$("#txtPartner").attr("disabled", true);
		selCompanyCode.attr("disabled", true);
		txtCostCenter.attr("disabled", true);
		selBusinessUnit.attr("disabled", true);
		}

        bindBU();


	//	console.log("initPage");
		Common.Loading.Hide();
    }

	$("#txtKeyMonth").bind("change", function (e) {

		bindBU();

		if ("@AuthLevel" == "BU_ADMIN") {
			selBusinessUnit.val(getbucd());
		}
	});

    const initTab = (idx) => {

        if (idx == 1) {
            btnMailBu.removeClass("hidden");
            btnMailConfig.removeClass("hidden");
        }
        else {
            btnMailBu.addClass("hidden");
            btnMailConfig.addClass("hidden");

			if (tooltip_area) tooltip_area.addClass("hidden");
		}

		if (idx === 4) {
			btnMailOver.removeClass("hidden");
		}
		else {
			btnMailOver.addClass("hidden");
		}
    }


    const initSearchArea = (val) => {
        if (val == "F") {
            // 구분에 FIRM 을 선택하면 Company Code, CostCenter, Business Unit, Parnter Name 이 모두 Clear 되고, 비활성
            txtCostCenter.val("");
            txtCostCenter.attr("disabled", true);
            selCompanyCode.val("");
            selCompanyCode.attr("disabled", true);
            selBusinessUnit.val("");
            selBusinessUnit.attr("disabled", true);
            txtPartner.val("");
            txtPartner.attr("disabled", true);
            btnPartner.attr("disabled", true);
            txtPartnerInfo.html("");
            mustInput = [];

        }
        else if (val == "B") {
            // 구분에 BU를 선택하면  Business Unit 선택 필수, Parnter Name 이 Clear 되고 비활성
            mustInput.push(selBusinessUnit);
            txtCostCenter.attr("disabled", false);
            selCompanyCode.attr("disabled", false);
            selBusinessUnit.attr("disabled", false);
            txtPartner.val("");
            txtPartner.attr("disabled", true);
            btnPartner.attr("disabled", true);
            txtPartnerInfo.html("");
        }
        else {
            txtCostCenter.attr("disabled", false);
            selCompanyCode.attr("disabled", false);
            selBusinessUnit.attr("disabled", false);
            txtPartner.attr("disabled", false);
            btnPartner.attr("disabled", false);
            mustInput = [];
        }
	}


	const sendMail = () => {

		$("#toList").val("");

		let lst = "";
		let lst_text = "";
		// hdnBuList

		const buList = Common.DataSet.StringToDataTable($("#hdnBuList").val());

        for (const chk of document.querySelectorAll(".chkMailTaget:checked")) {
			if (0 < lst.length) {
				lst += ",";
				lst_text += ", ";
			}
			lst += chk.value;
			let targetFlag = getBelowFy24_YN();
			const bu = buList.Rows.filter(item => item.CostCenterFunction === chk.value && item.FY24_BELOW === targetFlag);
			lst_text += bu[0].CostCenterFunctionName;
        }

		if (0 < lst.length) {

			Common.Msg(`${lst_text} 메일 발송하시겠습니까?`,
			{
				mode: "confrim"
				, okback: function () {

					tooltip_area.addClass("hidden");
					Common.Loading.Show();
					$("#toList").val(lst);

					setTimeout(() => {

					    var reqInfo = new Common.RequestInfo();
					    reqInfo.formData = new FormData();
					    reqInfo.AddParameter($("#SearchArea"));

					    var datas = [];
					    Common.Ajax(`/Sap_PartnerExpenseReport/EBReportBuMailSend`, reqInfo, function (rtn) {
					        Common.Msg("메일이 정상적으로 발송되었습니다");
					    }, {
					        okErr: function (result) {
					            Common.CheckErrorMsg(result);
					        }
					    });
					    Common.Loading.Hide();

					}, 500);

				}
			});

        }
        else {
            Common.Msg("선택된 BU가 없습니다.");
            Common.Loading.Hide();
        }
	}
	const sendMailToOver = () => {

		$("#toList").val("");

		const chks = document.querySelectorAll('input[type="checkbox"]:checked[data-ptnno-bucd]'); // 수정 20241026
		// 선택된 체크박스의 data-ptnno 값을 담을 배열
		const ptnnoValues = [];
		// 각 체크박스 요소 순회하며 data-ptnno 값을 배열에 추가
		chks.forEach(chk => {
			ptnnoValues.push(chk.dataset.ptnnoBucd); // 수정 20241026
		});


		let lst = "";
		lst += ptnnoValues.join(", ");


		if (0 < ptnnoValues.length) {

			Common.Msg(`${ptnnoValues.length}명 메일 발송하시겠습니까?`,
				{
					mode: "confrim"
					, okback: function () {

						Common.Loading.Show();
						$("#toList").val(lst);

						setTimeout(() => {

							var reqInfo = new Common.RequestInfo();
							reqInfo.formData = new FormData();
							reqInfo.AddParameter($("#SearchArea"));

							var datas = [];
							Common.Ajax(`/Sap_PartnerExpenseReport/SendMailPERportOver`, reqInfo, function (rtn) {
								//var dataDs = Common.DataSet.StringToDataSet(rtn);
								//datas = dataDs.Tables[0].Rows;
								Common.Msg("메일이 정상적으로 발송되었습니다");
							}, {
								okErr: function (result) {
									Common.CheckErrorMsg(result);
								}
							});
							Common.Loading.Hide();

						}, 500);

					}
				});
		}
		else {
			Common.Msg("선택된 인원이 없습니다.");
			Common.Loading.Hide();
		}



	}
    const setSelectDisable = (id) => {
		const selectElement = document.getElementById(id);
		selectElement.style.backgroundColor = '#eee';
		selectElement.style.cursor = 'not-allowed';
		selectElement.style.pointerEvents = 'none';
	}

	const getbucd = () => {
		const fy = Common.GetFiscalYear($("#txtKeyMonth").val());
		let bucd = "@ViewBag.BU_CD";
		if (2024 < fy.fiscalYear && "@ViewBag.BU_CD_FY25" != "") bucd = "@ViewBag.BU_CD_FY25";
		return bucd;
	}

    selGubun.bind("change", function () { initSearchArea($(this).val()); });
    btnMailOk.bind("click", sendMail)
    $("#BtnMailCancel").bind("click", () => { tooltip_area.addClass("hidden"); });
    btnSearch.bind("click", doSearch);
	$(btnBack).bind("click", doBack);
	$(btnMailOver).bind("click", sendMailToOver);
	$(document).ready(initPage);
</script>
@if (AuthLevel == "ADMIN")
{
    <script>
        dic[4] = "Over";

        function tooltipon() {

            // 체크 해제
            $(".chkMailTaget:checked").prop("checked", false);

            const buttonRect = btnMailBu[0].getBoundingClientRect();
            tooltip_area.css("left", `${buttonRect.left - 220}px`);
            tooltip_area.css("top", `${buttonRect.top + 32}px`);
            tooltip_area.removeClass("hidden");
        }

        window.addEventListener("resize", function () {
            if (!tooltip_area[0].classList.contains("hidden")) {
                tooltipon();
            }
        });

        window.addEventListener('scroll', () => {

            if (!tooltip_area[0].classList.contains("hidden")) {
                // 현재 스크롤 위치
                const scrollTop = window.pageYOffset || document.documentElement.scrollTop;

                // 버튼 위치
                const buttonRect = btnMailBu[0].getBoundingClientRect();
                const buttonTop = buttonRect.top + scrollTop;

                // 툴팁 위치 조정
                tooltip_area.css("top", `${buttonRect.top + scrollTop + 32}px`);
            }
        });
        btnMailBu.bind("click", tooltipon);

        const openCode = function (_m) {
            Common.Loading.Show();
            Custom.Dialog({ url: '/Sap_PartnerExpenseReport/WBSExcept', param: { m: _m } });

            //alert(this.target);
        }

        $("#BtnCode1").bind("click", () => openCode("E"));
        $("#BtnCode2").bind("click", () => openCode("C"));


    </script>
}
else
{

    if (AuthLevel == "BU_ADMIN" && BuAll =="")
    {
        <script>

            $(document).ready(() => {
                selBusinessUnit.val(getbucd());
                setSelectDisable('selBusinessUnit');
            });
        </script>
    }
    else if (AuthLevel == "PARTNER")
    {
        <script>
            $(document).ready(() => {
                setSelectDisable('selGubun');
            });
        </script>
    }
}
